--- vs/editor/standalone/browser/standaloneServices.js
+++ vs/editor/standalone/browser/standaloneServices.js
@@ -249,7 +249,7 @@
         this._cachedResolver = null;
         this._dynamicKeybindings = [];
         this._domNodeListeners = [];
-        const addContainer = (domNode) => {
+        const addContainer = (domNode) => { return
             const disposables = new DisposableStore();
             // for standard keybindings
             disposables.add(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, (e) => {

--- vs/editor/browser/controller/textAreaInput.js
+++ vs/editor/browser/controller/textAreaInput.js
@@ -131,6 +131,7 @@
         this._currentComposition = null;
         let lastKeyDown = null;
         this._register(this._textArea.onKeyDown((_e) => {
+if (0) {
             const e = new StandardKeyboardEvent(_e);
             if (e.keyCode === 114 /* KeyCode.KEY_IN_COMPOSITION */
                 || (this._currentComposition && e.keyCode === 1 /* KeyCode.Backspace */)) {
@@ -144,10 +145,13 @@
             }
             lastKeyDown = e;
             this._onKeyDown.fire(e);
+}
         }));
         this._register(this._textArea.onKeyUp((_e) => {
+/*
             const e = new StandardKeyboardEvent(_e);
             this._onKeyUp.fire(e);
+*/
         }));
         this._register(this._textArea.onCompositionStart((e) => {
             if (_debugComposition) {
